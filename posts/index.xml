<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Victor S. Melo</title>
        <link>https://victor.dev.br/posts/</link>
        <description>Recent content in Posts on Victor S. Melo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 29 Nov 2020 15:51:45 -0300</lastBuildDate>
        <atom:link href="https://victor.dev.br/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Trying to Apply Interactor in SwiftUI</title>
            <link>https://victor.dev.br/posts/trying-to-apply-interactor-in-swiftui/</link>
            <pubDate>Sun, 29 Nov 2020 15:51:45 -0300</pubDate>
            
            <guid>https://victor.dev.br/posts/trying-to-apply-interactor-in-swiftui/</guid>
            <description>Trying to apply Interactor in SwiftUI When we talk about SwiftUI, we must first understand that the patterns applied to UIKit can’t be directly applied in this new approach. The problems we need to solve when we use UIKit are different from the ones when we use SwiftUI, and trying to apply the same solutions as it is to both seems to be a lazy approach that will lead you to headaches in the future.</description>
            <content type="html"><![CDATA[<h1 id="trying-to-apply-interactor-in-swiftui">Trying to apply Interactor in SwiftUI</h1>
<p>When we talk about SwiftUI, we must first understand that the patterns applied to UIKit can’t be directly applied in this new approach. The problems we need to solve when we use UIKit are different from the ones when we use SwiftUI, and trying to apply the same solutions as it is to both seems to be a lazy approach that will lead you to headaches in the future.</p>
<p>But I will not be a hypocrite here. It’s inevitable that, as human beings, we make connections between what we already know to anything we are trying to learn. It’s a natural and really useful tool helping us to learn faster and to make brain connections that will last longer. That’s the reason you’ll find many online articles entitled “Applying MVC in SwiftUI”, “SwiftUI with MVVM”, or any other architecture broadly applied in the UIKit development world, like VIPER, VIP, and so on. These articles are the result of people trying to make connections between what they know to what they are learning.</p>
<p>During my recent experience with SwiftUI, for an indie app I’ve been developing, I was trying to find an approach to handle persistence encapsulation. My first solution was to persist in UserDefaults, but using an architecture approach where when I need to replace UserDefaults for a better solution, I can replace the integration just in one place in the code.</p>
<h1 id="interactors">Interactors</h1>
<p>During my research for a solution, I found out <strong>Interactors</strong>, a component broadly used in VIPER and VIP architectures. It’s an interface between model or data persistence layers and the UI modules that, in my case, were the views and view models. I decided to use ViewModel for my project as a suggestion from a SwiftUI Apple engineer during a lab at WWDC2020, where he assisted me with my project architecture.</p>
<p>Something we need to understand when we’re developing our project is that <strong>all patterns are adaptable</strong>. We don’t need to implement VIP to use Interactor. We can adapt this component to what we need, and in most cases, we will find components that solve the same problem being used in different architectures with different names. For example, an <strong>Interactor</strong> is just an <strong>Interface</strong>, like in Java, where we provide a set of behavior and whoever will conform to that Interface must implement these behaviors. And guess what? A <strong>Protocol</strong>  in Swift can be seen as an <strong>Interface</strong> in Java, and so on. Of course, each approach has its nuances, but the purpose of usage is similar.</p>
<h1 id="enough-talk-show-me-the-code">Enough Talk! Show me the code</h1>
<p>I will share my implementation for <strong>Interactor</strong> in my project, but you should understand that it should not be used directly in yours. You are welcome to adapt it if you need, but you must understand that your project is unique, reflecting on what you are coding.</p>
<h2 id="maininteractor">MainInteractor</h2>
<p>This is a protocol to be conformed from anyone who wants to become an Interactor:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">protocol</span> <span style="color:#a6e22e">MainInteractor</span> {
    <span style="color:#66d9ef">var</span> appState: AppState { <span style="color:#66d9ef">get</span> }
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">loadAppState</span>()
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">saveAppState</span>()
}
</code></pre></div><p>I decided to save and load the app state as a whole in one operation. But remember: this is just the interface. If I need, I can make a complex rule to persist and load only the changed data without changing this interface. That&rsquo;s the beauty of encapsulation.</p>
<p>My AppState is just a model that keeps the data I need to persist. As it is not relevant for this article, I will show an example below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">SwiftUI</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AppState</span>: ObservableObject {
    @Published <span style="color:#66d9ef">var</span> user = User()
}
</code></pre></div><h2 id="maininteractorimp">MainInteractorImp</h2>
<p>MainInteractorImp is my component that conforms to the protocol <strong>MainInteractor</strong>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">MainInteractorImp</span>: MainInteractor {
    
    <span style="color:#66d9ef">let</span> userRepository: AppStateRepository
    <span style="color:#66d9ef">let</span> appState: AppState
    
    <span style="color:#66d9ef">init</span>(userRepository: AppStateRepository, appState: AppState) {
        <span style="color:#66d9ef">self</span>.userRepository = userRepository
        <span style="color:#66d9ef">self</span>.appState = appState
    }
    
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">loadAppState</span>() {
        appState.user = userRepository.loadUser()
    }
    
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">saveAppState</span>() {
        userRepository.saveUser(appState.user)
    }
}
</code></pre></div><p><em>AppStateRepository</em> is just a wrapper that is responsible for the persistence logic. As the <em>Interactor</em> should not only be used for persistence, and in the future, I may give it other responsibilities, like networking calls, I want to be able to replace only the <em>AppStateRepository</em> for only persistence changes.</p>
<h2 id="interactorscontainer">InteractorsContainer</h2>
<p>InteractorsContainer is a singleton that wraps the Interactor used in the project. It’s the element that will be integrated with the SwiftUI, allowing us to change almost every other layer explained above without needing to change any code inside the SwiftUI views.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">SwiftUI</span>

<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">InteractorsContainer</span>: EnvironmentKey {
    
    <span style="color:#66d9ef">let</span> mainInteractor: MainInteractor
    
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">var</span> defaultValue: <span style="color:#66d9ef">Self</span> { <span style="color:#66d9ef">Self</span>.<span style="color:#66d9ef">default</span> }
    
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">let</span> `<span style="color:#66d9ef">default</span>` = <span style="color:#66d9ef">Self</span>(mainInteractor: MainInteractorImp(userRepository: UserDefaultsAppStateRepository(), appState: AppState()))
    
    <span style="color:#66d9ef">init</span>(mainInteractor: MainInteractor) {
        <span style="color:#66d9ef">self</span>.mainInteractor = mainInteractor
        <span style="color:#66d9ef">self</span>.mainInteractor.loadAppState()
    }
}

<span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">EnvironmentValues</span> {
    <span style="color:#66d9ef">var</span> interactors: InteractorsContainer {
        <span style="color:#66d9ef">get</span> { <span style="color:#66d9ef">self</span>[InteractorsContainer.<span style="color:#66d9ef">self</span>] }
        <span style="color:#66d9ef">set</span> { <span style="color:#66d9ef">self</span>[InteractorsContainer.<span style="color:#66d9ef">self</span>] = newValue }
    }
}

</code></pre></div><p><em>InteractorsContainer</em> is initialized in SceneDelegate to load data when the app starts, and it sets the app state as an environment object, like below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">scene</span>(<span style="color:#66d9ef">_</span> scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {
        <span style="color:#66d9ef">let</span> interactors = InteractorsContainer.defaultValue
        interactors.mainInteractor.loadAppState()

		<span style="color:#66d9ef">let</span> myView = CustomView().environmentObject(interactors.mainInteractor.appState)
		<span style="color:#75715e">// ...</span>
}
</code></pre></div><p>Inside SwiftUI views, we will define two parameters:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">OnboardingAvatarPickerView</span>: View {
    
    @EnvironmentObject <span style="color:#66d9ef">var</span> appState: AppState
    @Environment(<span style="color:#960050;background-color:#1e0010">\</span>.interactors) <span style="color:#66d9ef">var</span> interactors: InteractorsContainer
    
    <span style="color:#66d9ef">var</span> body: some View {
		<span style="color:#75715e">//...</span>
	  }
}
</code></pre></div><p>Now, whenever we want to persist some data, we just call <code>self.interactors.mainInteractor.saveAppState()</code> in the View. For example, I have an <code>EditView</code>, where the user changes the app configuration. Then I call this persistence method inside <code>.onDisappear</code>, like below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">var</span> Body: some View {
	MyView {
		<span style="color:#75715e">// any view here</span>
	}.onDisappear {
  		<span style="color:#66d9ef">self</span>.interactors.mainInteractor.saveAppState()
  }
}
</code></pre></div><h1 id="conclusion">Conclusion</h1>
<p>The only thing I hope you’ve learned from this article is that we always need to reflect and understand why we’re taking some action when coding. Don’t do something just because someone said it. Understand what led that person to say it, and reflect on your situation before implementing it. This approach will save you a lot of your time and make you a better software engineer.</p>
]]></content>
        </item>
        
        <item>
            <title>Swift Failable Initializer</title>
            <link>https://victor.dev.br/posts/swift-failable-initializer/</link>
            <pubDate>Wed, 25 Nov 2020 16:58:25 -0300</pubDate>
            
            <guid>https://victor.dev.br/posts/swift-failable-initializer/</guid>
            <description>Consider the case below:
final class Human { let name: String var age: Int init(name: String, age: Int) { self.name = name self.age = age } } This is a simple class that represents a human being. At a first glance, we may not see any problem in this definition… or do we?
To understand the problems, we can play with the boundaries values. (This is a technique widely used in software testing).</description>
            <content type="html"><![CDATA[<p>Consider the case below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Human</span> {
	<span style="color:#66d9ef">let</span> name: String
	<span style="color:#66d9ef">var</span> age: Int

	<span style="color:#66d9ef">init</span>(name: String, age: Int) {
		<span style="color:#66d9ef">self</span>.name = name
		<span style="color:#66d9ef">self</span>.age = age
	}
}
</code></pre></div><p>This is a simple class that represents a human being. At a first glance, we may not see any problem in this definition… or do we?</p>
<p>To understand the problems, we can play with the boundaries values. (This is a technique widely used in software testing). Let’s play:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> john = Human(name: <span style="color:#e6db74">&#34;John&#34;</span>, age: <span style="color:#ae81ff">26</span>) <span style="color:#75715e">// 1</span>

<span style="color:#66d9ef">let</span> will = Human(name: <span style="color:#e6db74">&#34;Will&#34;</span>, age: <span style="color:#ae81ff">0</span>) <span style="color:#75715e">// 2</span>

<span style="color:#66d9ef">let</span> anne = Human(name: <span style="color:#e6db74">&#34;&#34;</span>, age: <span style="color:#ae81ff">999</span>) <span style="color:#75715e">// 3</span>

<span style="color:#66d9ef">let</span> mary = Human (name: <span style="color:#e6db74">&#34;23&#34;</span>, age: <span style="color:#f92672">-</span><span style="color:#ae81ff">12</span>) <span style="color:#75715e">// 4</span>

</code></pre></div><ul>
<li><strong>// 1:</strong> This is a default case. It&rsquo;s how we expect our class to be used;</li>
<li><strong>// 2:</strong> Here we see that our human instance has age 0. That may make sense or not, depending only on our business (is this a baby registering app?).</li>
<li><strong>// 3:</strong> This case doesn’t make any sense. This human has no name. At the same time, it is the oldest person humanity has ever seen.</li>
<li><strong>// 4:</strong> Here we have a person with a weird name and negative age.</li>
</ul>
<h1 id="solutions">Solutions</h1>
<p>There are a few options to mitigate this problem. We can just make a treatments like if the age is below zero, it should be converted to zero. Then we define some unit tests to guarantee it is working:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Human</span> {
	<span style="color:#66d9ef">let</span> name: String
	<span style="color:#66d9ef">var</span> age: Int

	<span style="color:#66d9ef">init</span>(name: String, age: Int) {
		<span style="color:#66d9ef">self</span>.name = name
		<span style="color:#66d9ef">self</span>.age = age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> ? age : <span style="color:#ae81ff">0</span>
	}
}

<span style="color:#75715e">// Test Bundle:</span>

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HumanTests</span>: XCTestCase {
  <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">test_initWithNegativeAge_expectHumanWithAgeZero</span>() {
    <span style="color:#66d9ef">let</span> human = Human(<span style="color:#e6db74">&#34;John&#34;</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">12</span>)
    XCTAssertEqual(human.age, <span style="color:#ae81ff">0</span>)
  }
}

</code></pre></div><p>But it still doesn’t seem right&hellip;</p>
<p>We are telling “I want a human with negative age”, and the code is returning to us a Human instance, but the data is not what we expected. This can lead to a missunderstanding.</p>
<p>Another problem I see here is that our class <code>Human</code> is responsible to solve the invalid input. When we talk about <a href="https://en.wikipedia.org/wiki/Single-responsibility_principle">single responsibility principle</a>, <code>Human</code> is doing more than it should.</p>
<p>Another solution could be defining a <a href="https://en.wikipedia.org/wiki/Design_by_contract">contract</a> for the initializer. Personally I don&rsquo;t like to recur to contracts. For me, the fact that it is heavily dependant on the programmer usage is a risk. That&rsquo;s the reason I use this as a last resource.</p>
<p>But don&rsquo;t worry! This is a classic case where an optional initializer is useful. If we don’t want humans instances with negative age or empty name, we can just don’t create it. This way we may prevent this error to propagate through the code.</p>
<p>The solution using optional initializer would look like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Human</span> {
	<span style="color:#66d9ef">let</span> name: String
	<span style="color:#66d9ef">var</span> age: Int

	<span style="color:#66d9ef">init</span>?(name: String, age: Int) {
		<span style="color:#66d9ef">guard</span> <span style="color:#f92672">!</span>name.isEmpty <span style="color:#f92672">&amp;&amp;</span> age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">else</span> { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span> }
		<span style="color:#66d9ef">self</span>.name = name
		<span style="color:#66d9ef">self</span>.age = age
	}
}

<span style="color:#75715e">// Test Bundle:</span>

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HumanTests</span>: XCTestCase {
  <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">test_initWithNegativeAge_expectNil</span>() {
    <span style="color:#66d9ef">let</span> human = Human(<span style="color:#e6db74">&#34;John&#34;</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">12</span>)
    XCTAssertNil(human)
  }
}


</code></pre></div><p>This solution leaves to the caller of <code>Human.init</code> the responsibility to handle the invalid cases. It seems makes sense, as the caller was the one that used these invalid inputs.</p>
<p>We may apply any business rules inside optional initializer, but be careful to don&rsquo;t overload it with complex code. If you use it carefully, combining it with good unit tests, you will make your code better and your system safer :)</p>
]]></content>
        </item>
        
        <item>
            <title>Processes and Threads</title>
            <link>https://victor.dev.br/posts/processes-threads/</link>
            <pubDate>Wed, 09 Sep 2020 15:42:50 -0300</pubDate>
            
            <guid>https://victor.dev.br/posts/processes-threads/</guid>
            <description>In this article, I present an overview of processes and threads.
Processes A process can be explained as “a program being executed“.
A process is not a program. You can have n processes for the same program. For example, when you open a tab in Chrome, it creates a new process called Google Chrome Helper (Renderer). So, Google Chrome can have multiple processes.
In the image above, I have multiple Chrome processes.</description>
            <content type="html"><![CDATA[<p>In this article, I present an overview of processes and threads.</p>
<h1 id="processes">Processes</h1>
<p>A process can be explained as “a program being executed“.</p>
<p>A process is not a program. You can have <strong>n</strong> processes for the same program. For example, when you open a tab in Chrome, it creates a new process called <code>Google Chrome Helper (Renderer)</code>. So, Google Chrome can have multiple processes.</p>
<p><img src="/images/processes.png" alt="img"></p>
<p><em>In the image above, I have multiple Chrome processes.</em></p>
<p>It’s important to say that Chrome creates these processes not only for tabs but also for extensions. For example, when I force closed one process, a message appeared “Extension <em>X</em> stopped working”.</p>
<h2 id="processes-and-the-operating-system">Processes and the Operating System</h2>
<p>When your OS starts, if it uses UNIX like MacOS, it will start an initial process, and all processes created later will be derived from this one. A process can create another. For example: from a Google Chrome tab, I can open another tab.</p>
<p>The process has all information for your program run in CPU, including:</p>
<ul>
<li><strong>Text Section</strong>: contains the program code.</li>
<li><strong>Program Counter</strong>: is a pointer to the current code instruction being executed.</li>
<li><strong>Stack:</strong> where the temporary data are stored, like function parameters.</li>
<li><strong>Data section:</strong> where global data is stored.</li>
<li><strong>Heap:</strong> dynamically located memory during execution.</li>
</ul>
<h2 id="static-vs-dynamic-allocation">Static VS Dynamic Allocation</h2>
<p>When we talk about static and dynamic allocation, we’re talking about the costs related to storing data in the <strong>Data section</strong>, <strong>Stack</strong> and <strong>Heap</strong>.</p>
<p>An amazing article from Shubham Bakshi, that talks about static vs dynamic dispatch in iOS can be found <a href="https://medium.com/flawless-app-stories/static-vs-dynamic-dispatch-in-swift-a-decisive-choice-cece1e872d">here</a>.</p>
<h1 id="threads">Threads</h1>
<p>Thread is a basic unity of CPU usage. A process can have <strong>n</strong> threads, where each thread can be focused on a different work, like a thread for UI, a thread for networking, and so on.</p>
<p>We all know that we shouldn’t make a heavy processing operation in the main/UI thread. As this thread should be used for user interactions, if it uses its processing time for another task, like fetching data from an API, the user interaction will be delayed, blocking the UI.</p>
<p>It’s important to say that different threads of a process share the code section, the data section, and OS resources being used by the process.</p>
<p>Threads are cheaper to create and switch in CPU. Switching between processes requires the operating system to replace all contextual information in the CPU, including code and data sections. Thread switching is cheaper for many reasons, including the fact that switching threads from the same process doesn’t require switching the code or data section, as it is shared and is already available in the CPU.</p>
<h3 id="thread-in-swift">Thread in Swift</h3>
<p>As a Cocoa developer, we rarely directly interact with threads. The <a href="https://developer.apple.com/documentation/DISPATCH">Grand Central Dispatch (GCD)</a> is the API we must use to create concurrent code. It&rsquo;s a unique interface that we have to learn that is used in macOS, iOS, watchOS, and tvOS. If we did not have a unique API for that, we would need to learn at least one API for each platform, or even worse if we needed to create code for the multicores directly.</p>
<p>GCD works with dispatch queues. The work submited to these queues is executed on a pool of thread, and we don&rsquo;t need to worry about which thread is being used, being the <strong>main</strong> thread the only exception.</p>
<p>GCD operates at the system level, accommodating the needs of all running applications.</p>
<p>An example of GCD usage, found at <a href="https://www.swiftbysundell.com/basics/grand-central-dispatch/">swiftbysundell.com</a>, follows below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">var</span> items: [Item]?
DispatchQueue.main.async {
  items = findItems(matching: <span style="color:#e6db74">&#34;News&#34;</span>)
}
</code></pre></div><p>The main queue used above is associated with the main thread. It&rsquo;s the only queue that is guaranteed to be executed on a thread, the main in this case.</p>
<p>If we need to do a work like fetching data from a server, we should create our own queue, like in the example below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> queue = DispatchQueue(label: <span style="color:#e6db74">&#34;fetch-data-queue&#34;</span>)

queue.async {
  <span style="color:#66d9ef">self</span>.fetchDataFromServer()
}
</code></pre></div><p>As GCD is an API and there are a lot of topics I would like to cover about it, I will leave it to another article. But if you want to know more about it now, there are multiple material you can find online, like these below that I recommend:</p>
<p><a href="https://cocoacasts.com/swift-and-cocoa-fundamentals-threads-queues-and-concurrency">Threads, Queues, and Concurrency</a></p>
<p><a href="https://www.swiftbysundell.com/basics/grand-central-dispatch/">Grand Central Dispatch</a></p>
<p><a href="https://medium.com/better-programming/threading-in-swift-simply-explained-5c8dd680b9b2">Threading in Swift Simply Explained</a></p>
<h1 id="references">References</h1>
<p>Operating System Concepts, 9th edition, <em>Abraham Silberschatz.</em></p>
]]></content>
        </item>
        
        <item>
            <title>Hello, World!</title>
            <link>https://victor.dev.br/posts/my-first-post/</link>
            <pubDate>Tue, 01 Sep 2020 16:45:04 -0300</pubDate>
            
            <guid>https://victor.dev.br/posts/my-first-post/</guid>
            <description>Hello! My name is Victor and I&amp;rsquo;m an iOS consultant at ThoughtWorks, and a computer science undergraduate student at Federal University of Rio Grande do Sul, Brazil.
I&amp;rsquo;ve been using a personal website since 2017, but it was more like a &amp;ldquo;web business card&amp;rdquo;, showing my projects, social media, and so on.
Now I want to use this space to share content. The topics will be about anything I find interesting in my &amp;ldquo;computer scientist world&amp;rdquo;, that includes software engineering topics I learn in my daily work at ThoughtWorks, content I found interesting in my college classes, Apple platform development, and other related stuffs.</description>
            <content type="html"><![CDATA[<p>Hello! My name is Victor and I&rsquo;m an iOS consultant at ThoughtWorks, and a computer science undergraduate student at Federal University of Rio Grande do Sul, Brazil.</p>
<p>I&rsquo;ve been using a personal website since 2017, but it was more like a &ldquo;web business card&rdquo;, showing my projects, social media, and so on.</p>
<p>Now I want to use this space to share content. The topics will be about anything I find interesting in my &ldquo;computer scientist world&rdquo;, that includes software engineering topics I learn in my daily work at ThoughtWorks, content I found interesting in my college classes, Apple platform development, and other related stuffs.</p>
<p>So, see you soon :)</p>
]]></content>
        </item>
        
    </channel>
</rss>
