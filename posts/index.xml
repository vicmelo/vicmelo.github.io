<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Victor S. Melo</title>
        <link>https://victor.dev.br/posts/</link>
        <description>Recent content in Posts on Victor S. Melo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 25 Nov 2020 16:58:25 -0300</lastBuildDate>
        <atom:link href="https://victor.dev.br/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Swift Failable Initializer</title>
            <link>https://victor.dev.br/posts/swift-failable-initializer/</link>
            <pubDate>Wed, 25 Nov 2020 16:58:25 -0300</pubDate>
            
            <guid>https://victor.dev.br/posts/swift-failable-initializer/</guid>
            <description>Swift: Failable Initializer Consider the case below:
final class Human { let name: String var age: Int init(name: String, age: Int) { self.name = name self.age = age } } This is a simple class that represents a human being. At a first glance, we may not see any problem in this definition… or do we?
To understand the problems, we can play with the boundaries values. (This is a technique widely used in software testing).</description>
            <content type="html"><![CDATA[<h1 id="swift-failable-initializer">Swift: Failable Initializer</h1>
<p>Consider the case below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Human</span> {
	<span style="color:#66d9ef">let</span> name: String
	<span style="color:#66d9ef">var</span> age: Int

	<span style="color:#66d9ef">init</span>(name: String, age: Int) {
		<span style="color:#66d9ef">self</span>.name = name
		<span style="color:#66d9ef">self</span>.age = age
	}
}
</code></pre></div><p>This is a simple class that represents a human being. At a first glance, we may not see any problem in this definition… or do we?</p>
<p>To understand the problems, we can play with the boundaries values. (This is a technique widely used in software testing). Let’s play:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> john = Human(name: <span style="color:#e6db74">&#34;John&#34;</span>, age: <span style="color:#ae81ff">26</span>) <span style="color:#75715e">// 1</span>

<span style="color:#66d9ef">let</span> will = Human(name: <span style="color:#e6db74">&#34;Will&#34;</span>, age: <span style="color:#ae81ff">0</span>) <span style="color:#75715e">// 2</span>

<span style="color:#66d9ef">let</span> anne = Human(name: <span style="color:#e6db74">&#34;&#34;</span>, age: <span style="color:#ae81ff">999</span>) <span style="color:#75715e">// 3</span>

<span style="color:#66d9ef">let</span> mary = Human (name: <span style="color:#e6db74">&#34;23&#34;</span>, age: <span style="color:#f92672">-</span><span style="color:#ae81ff">12</span>) <span style="color:#75715e">// 4</span>

</code></pre></div><ul>
<li><strong>// 1:</strong> This is a default case. It&rsquo;s how we expect our class to be used;</li>
<li><strong>// 2:</strong> Here we see that our human instance has age 0. That may make sense or not, depending only on our business (is this a baby registering app?).</li>
<li><strong>// 3:</strong> This case doesn’t make any sense. This human has no name. At the same time, it is the oldest person humanity has ever seen.</li>
<li><strong>// 4:</strong> Here we have a person with a weird name and negative age.</li>
</ul>
<h1 id="solutions">Solutions</h1>
<p>There are a few options to mitigate this problem. We can just make a treatments like if the age is below zero, it should be converted to zero. Then we define some unit tests to guarantee it is working:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Human</span> {
	<span style="color:#66d9ef">let</span> name: String
	<span style="color:#66d9ef">var</span> age: Int

	<span style="color:#66d9ef">init</span>(name: String, age: Int) {
		<span style="color:#66d9ef">self</span>.name = name
		<span style="color:#66d9ef">self</span>.age = age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> ? age : <span style="color:#ae81ff">0</span>
	}
}

<span style="color:#75715e">// Test Bundle:</span>

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HumanTests</span>: XCTestCase {
  <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">test_initWithNegativeAge_expectHumanWithAgeZero</span>() {
    <span style="color:#66d9ef">let</span> human = Human(<span style="color:#e6db74">&#34;John&#34;</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">12</span>)
    XCTAssertEqual(human.age, <span style="color:#ae81ff">0</span>)
  }
}

</code></pre></div><p>But it still doesn’t seem right&hellip;</p>
<p>We are telling “I want a human with negative age”, and the code is returning to us a Human instance, but the data is not what we expected. This can lead to a missunderstanding.</p>
<p>Another problem I see here is that our class <code>Human</code> is responsible to solve the invalid input. When we talk about <a href="https://en.wikipedia.org/wiki/Single-responsibility_principle">single responsibility principle</a>, <code>Human</code> is doing more than it should.</p>
<p>Another solution could be defining a <a href="https://en.wikipedia.org/wiki/Design_by_contract">contract</a> for the initializer. Personally I don&rsquo;t like to recur to contracts. For me, the fact that it is heavily dependant on the programmer usage is a risk. That&rsquo;s the reason I use this as a last resource.</p>
<p>But don&rsquo;t worry! This is a classic case where an optional initializer is useful. If we don’t want humans instances with negative age or empty name, we can just don’t create it. This way we may prevent this error to propagate through the code.</p>
<p>The solution using optional initializer would look like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Human</span> {
	<span style="color:#66d9ef">let</span> name: String
	<span style="color:#66d9ef">var</span> age: Int

	<span style="color:#66d9ef">init</span>?(name: String, age: Int) {
		<span style="color:#66d9ef">guard</span> <span style="color:#f92672">!</span>name.isEmpty <span style="color:#f92672">&amp;&amp;</span> age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">else</span> { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span> }
		<span style="color:#66d9ef">self</span>.name = name
		<span style="color:#66d9ef">self</span>.age = age
	}
}

<span style="color:#75715e">// Test Bundle:</span>

<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HumanTests</span>: XCTestCase {
  <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">test_initWithNegativeAge_expectNil</span>() {
    <span style="color:#66d9ef">let</span> human = Human(<span style="color:#e6db74">&#34;John&#34;</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">12</span>)
    XCTAssertNil(human)
  }
}


</code></pre></div><p>This solution leave to the caller of <code>Human.init</code> to handle the invalid cases. It makes sense to me to leave this responsibility to the caller, as it was the one that used these invalid inputs.</p>
<p>We may apply any business rules inside optional initializer, but be careful to don&rsquo;t overload it with complex code. If you use it carefully, combining it with good unit tests, you will make your code better and your system safer :)</p>
]]></content>
        </item>
        
        <item>
            <title>Processes and Threads</title>
            <link>https://victor.dev.br/posts/processes-threads/</link>
            <pubDate>Wed, 09 Sep 2020 15:42:50 -0300</pubDate>
            
            <guid>https://victor.dev.br/posts/processes-threads/</guid>
            <description>In this article, I present an overview about processes and threads.
Processes A process can be explained as “a program being executed“.
A process is not a program. You can have n processes for the same program. For example, when you open a tab in Chrome, it creates a new process called Google Chrome Helper (Renderer). So, Google Chrome can have multiple processes.
In the image above, I have multiple Chrome processes.</description>
            <content type="html"><![CDATA[<p>In this article, I present an overview about processes and threads.</p>
<h1 id="processes">Processes</h1>
<p>A process can be explained as “a program being executed“.</p>
<p>A process is not a program. You can have <strong>n</strong> processes for the same program. For example, when you open a tab in Chrome, it creates a new process called <code>Google Chrome Helper (Renderer)</code>. So, Google Chrome can have multiple processes.</p>
<p><img src="/images/processes.png" alt="img"></p>
<p><em>In the image above, I have multiple Chrome processes.</em></p>
<p>It’s important to say that Chrome create these processes not only for tabs, but also for extensions. For example, when I force closed one process, a message appeared “Extension <em>X</em> stopped working”.</p>
<h2 id="processes-and-the-operating-system">Processes and the Operating System</h2>
<p>When your OS starts, if it uses UNIX like MacOS, it will start an initial process, and all processes created later will be derived from this one. A process can create other. For example: from a Google Chrome tab, I can open another tab.</p>
<p>The process has all information for your program run in CPU, including:</p>
<ul>
<li><strong>Text Section</strong>: contains the program code.</li>
<li><strong>Program Counter</strong>: is a pointer to the current code instruction being executed.</li>
<li><strong>Stack:</strong> where the temporary data are stored, like function parameters.</li>
<li><strong>Data section:</strong> where global data is stored.</li>
<li><strong>Heap:</strong> dynamically located memory during execution.</li>
</ul>
<h2 id="static-vs-dynamic-allocation">Static VS Dynamic Allocation</h2>
<p>When we talk about static and dynamic allocation, we’re talking about the costs related to storing data in <strong>Data section</strong>, <strong>Stack</strong> and <strong>Heap</strong>.</p>
<p>An amazing article from Shubham Bakshi, that talks about static vs dynamic dispatch in iOS can be found <a href="https://medium.com/flawless-app-stories/static-vs-dynamic-dispatch-in-swift-a-decisive-choice-cece1e872d">here</a>.</p>
<h1 id="threads">Threads</h1>
<p>Thread is a basic unity of CPU usage. A process can have <strong>n</strong> threads, where each thread can be focused into a different work, like a thread for UI, a thread for networking, and so on.</p>
<p>Exploring an UI thread. We all know that we shouldn’t make a heavy processing operation in main/UI thread. As this thread should be used for user interactions, if it uses its processing time for another task, like fetching data from an API, the user interaction will be delayed, blocking the UI.</p>
<p>It’s important to say that different threads of a process share the code section, the data section and OS resources being used by the process.</p>
<p>Threads are cheaper to create and switch in CPU. Switching between processes requires the OS to replace all contextual information in CPU, including code and data sections. Thread switching is cheaper for many reasons, including the fact that switching threads from a same process doesn’t require to switch the code or data section, as it is shared and is already available in CPU.</p>
<h1 id="references">References</h1>
<p>Operating System Concepts, 9th edition, <em>Abraham Silberschatz.</em></p>
]]></content>
        </item>
        
        <item>
            <title>Hello, World!</title>
            <link>https://victor.dev.br/posts/my-first-post/</link>
            <pubDate>Tue, 01 Sep 2020 16:45:04 -0300</pubDate>
            
            <guid>https://victor.dev.br/posts/my-first-post/</guid>
            <description>Hello! My name is Victor and I&amp;rsquo;m an iOS consultant at ThoughtWorks, and a computer science undergraduate student at Federal University of Rio Grande do Sul, Brazil.
I&amp;rsquo;ve been using a personal website since 2017, but it was more like a &amp;ldquo;web business card&amp;rdquo;, showing my projects, social media, and so on.
Now I want to use this space to share content. The topics will be about anything I find interesting in my &amp;ldquo;computer scientist world&amp;rdquo;, that includes software engineering topics I learn in my daily work at ThoughtWorks, content I found interesting in my college classes, Apple platform development, and other related stuffs.</description>
            <content type="html"><![CDATA[<p>Hello! My name is Victor and I&rsquo;m an iOS consultant at ThoughtWorks, and a computer science undergraduate student at Federal University of Rio Grande do Sul, Brazil.</p>
<p>I&rsquo;ve been using a personal website since 2017, but it was more like a &ldquo;web business card&rdquo;, showing my projects, social media, and so on.</p>
<p>Now I want to use this space to share content. The topics will be about anything I find interesting in my &ldquo;computer scientist world&rdquo;, that includes software engineering topics I learn in my daily work at ThoughtWorks, content I found interesting in my college classes, Apple platform development, and other related stuffs.</p>
<p>So, see you soon :)</p>
]]></content>
        </item>
        
    </channel>
</rss>
